# -*- coding: utf-8 -*-
"""HODP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163Vw_57zg-ilDJ1nfEAKCksuN1T9CzXX
"""

import pandas as pd

# read the Excel file into a DataFrame
df = pd.read_excel('HODP.xlsx')

# print the first 5 rows of the DataFrame to verify that it was imported correctly
print(df.head())

# count the number of rows in the DataFrame
print(len(df))

# count the number of unique values in a column
print(df['Gender'].nunique())

# count the number of incidents by gender
print(df.groupby('Gender')['Incident'].count())

# count the number of incidents by race/ethnicity
print(df.groupby('Race/Ethnicity')['Incident'].count())

import matplotlib.pyplot as plt
import seaborn as sns

# create a bar chart of the number of incidents by gender
sns.countplot(x='Gender', data=df)
plt.title('Number of Incidents by Gender')
plt.show()

# create a pie chart of the number of incidents by race/ethnicity
df['Race/Ethnicity'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Number of Incidents by Race/Ethnicity')
plt.show()

import pandas as pd

# filter the DataFrame to only include rows where Race/Ethnicity is BLACK/AFRICAN AMERICAN
black_df = df[df['Race/Ethnicity'] == 'BLACK/AFRICAN AMERICAN']

# calculate the number of interactions where the officer initiated the interaction
black_officer_initiated = len(black_df[black_df['Officer Initiated'] == 'YES'])

# calculate the number of interactions where the officer did not initiate the interaction
black_not_officer_initiated = len(black_df[black_df['Officer Initiated'] == 'NO'])

# calculate the total number of interactions where Race/Ethnicity is BLACK/AFRICAN AMERICAN
black_total = len(black_df)

# calculate the percentage of interactions where the officer initiated the interaction
black_officer_initiated_percent = (black_officer_initiated / black_total) * 100

# calculate the percentage of interactions where the officer did not initiate the interaction
black_not_officer_initiated_percent = (black_not_officer_initiated / black_total) * 100

# filter the DataFrame to only include rows where Race/Ethnicity is not BLACK/AFRICAN AMERICAN
other_df = df[df['Race/Ethnicity'] != 'BLACK/AFRICAN AMERICAN']

# calculate the number of interactions where the officer initiated the interaction
other_officer_initiated = len(other_df[other_df['Officer Initiated'] == 'YES'])

# calculate the number of interactions where the officer did not initiate the interaction
other_not_officer_initiated = len(other_df[other_df['Officer Initiated'] == 'NO'])

# calculate the total number of interactions where Race/Ethnicity is not BLACK/AFRICAN AMERICAN
other_total = len(other_df)

# calculate the percentage of interactions where the officer initiated the interaction
other_officer_initiated_percent = (other_officer_initiated / other_total) * 100

# calculate the percentage of interactions where the officer did not initiate the interaction
other_not_officer_initiated_percent = (other_not_officer_initiated / other_total) * 100

# print the results
print('For interactions where Race/Ethnicity is BLACK/AFRICAN AMERICAN:')
print(f'{black_officer_initiated_percent:.2f}% were initiated by the officer')
print(f'{black_not_officer_initiated_percent:.2f}% were not initiated by the officer')
print()
print('For interactions where Race/Ethnicity is not BLACK/AFRICAN AMERICAN:')
print(f'{other_officer_initiated_percent:.2f}% were initiated by the officer')
print(f'{other_not_officer_initiated_percent:.2f}% were not initiated by the officer')

# filter the DataFrame to only include rows where Race/Ethnicity is BLACK/AFRICAN AMERICAN
white_df = df[df['Race/Ethnicity'] == 'WHITE']

# calculate the number of interactions where the officer initiated the interaction
white_officer_initiated = len(white_df[white_df['Officer Initiated'] == 'YES'])

# calculate the number of interactions where the officer did not initiate the interaction
white_not_officer_initiated = len(white_df[white_df['Officer Initiated'] == 'NO'])

# calculate the total number of interactions where Race/Ethnicity is BLACK/AFRICAN AMERICAN
white_total = len(white_df)

# calculate the percentage of interactions where the officer initiated the interaction
white_officer_initiated_percent = (white_officer_initiated / white_total) * 100

# calculate the percentage of interactions where the officer did not initiate the interaction
white_not_officer_initiated_percent = (white_not_officer_initiated / white_total) * 100


# print the results
print('For interactions where Race/Ethnicity is WHITE:')
print(f'{white_officer_initiated_percent:.2f}% were initiated by the officer')
print(f'{white_not_officer_initiated_percent:.2f}% were not initiated by the officer')
print()

"""Calculate the average age of individuals involved in police interactions for each race/ethnicity category in the dataset."""

# group the DataFrame by Gender and find the value counts for the Incident column for each group
gender_incident_counts = {}
for gender in df['Gender'].unique():
    gender_df = df[df['Gender'] == gender]
    incident_counts = gender_df['Incident'].value_counts()
    gender_incident_counts[gender] = incident_counts

# print the results
for gender, counts in gender_incident_counts.items():
    print(f"Most common incidents for {gender}:")
    print(counts.head())
    print()

# count the number of interactions for each race/ethnicity category
race_counts = df['Race/Ethnicity'].value_counts()

# create a bar chart
plt.figure(figsize=(8, 6))
sns.barplot(x=race_counts.index, y=race_counts.values, palette='viridis')
plt.xlabel('Race/Ethnicity')
plt.ylabel('Number of Interactions')
plt.title('Number of Police Interactions by Race/Ethnicity')
plt.tight_layout()
plt.show()

# create a histogram
plt.figure(figsize=(8, 6))
sns.histplot(data=df, x='Age', bins=20, kde=False, color='blue')
plt.xlabel('Age')
plt.ylabel('Count')
plt.title('Distribution of Ages for Police Interactions')
plt.tight_layout()
plt.show()

"""Analysis
For this analysis, we will look at the distribution of ages for individuals involved in police interactions across different race/ethnicity categories. We will also examine the types of incidents that are most commonly reported for each category. To do this, we will use the following code:
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# filter the DataFrame to only include rows where Race/Ethnicity is not null
df = df[df['Race/Ethnicity'].notnull()]

# create a histogram showing the distribution of ages for each race/ethnicity category
plt.figure(figsize=(8, 6))
sns.histplot(data=df, x='Age', hue='Race/Ethnicity', multiple='stack', kde=False, bins=20, alpha=0.7, palette='bright')
plt.xlabel('Age')
plt.ylabel('Count')
plt.title('Distribution of Ages for Police Interactions by Race/Ethnicity')
plt.legend(title='Race/Ethnicity')
plt.tight_layout()
plt.show()

# create a horizontal bar chart showing the most common incidents for each race/ethnicity category
incident_counts = {}
for category in df['Race/Ethnicity'].unique():
    category_df = df[df['Race/Ethnicity'] == category]
    incident_counts[category] = category_df['Incident'].value_counts().head(5)

fig, axes = plt.subplots(3, 2, figsize=(12, 12))
for ax, (category, counts) in zip(axes.flat, incident_counts.items()):
    sns.barplot(x=counts.values, y=counts.index, ax=ax, palette='bright')
    ax.set_xlabel('Count')
    ax.set_ylabel('')
    ax.set_title(category)
    for i, v in enumerate(counts.values):
        ax.text(v + 3, i + .25, str(v), color='black')
fig.suptitle('Most Common Incidents by Race/Ethnicity', fontsize=16)
plt.tight_layout()
plt.show()

"""The first part of the code creates a histogram using Seaborn's histplot() function. The histogram shows the distribution of ages for individuals involved in police interactions across different race/ethnicity categories. Each category is represented by a different colored bar in the histogram. The hue parameter is used to specify that the bars should be stacked, and the alpha parameter is used to adjust the transparency of the bars. The resulting graph shows that the distribution of ages for individuals involved in police interactions varies across different race/ethnicity categories. For example, the distribution of ages for individuals in the 'BLACK/AFRICAN AMERICAN' category skews younger than the distribution for other categories.

The second part of the code creates a series of bar charts using Seaborn's barplot() function. Each bar chart shows the most common incidents reported for a different race/ethnicity category. The zip() function is used to iterate over both the axes of the axes array and the items in the incident_counts dictionary. The barplot() function is then used to create a horizontal bar chart for each category. The for loop is used to add labels to each bar in the chart. The resulting graphs show that the types of incidents that are most commonly reported vary across different race/ethnicity categories. For example, 'Vehicle Stop' is the most common incident reported for individuals in the 'WHITE' and 'HISPANIC
"""